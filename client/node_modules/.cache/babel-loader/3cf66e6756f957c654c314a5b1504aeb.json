{"ast":null,"code":"import _slicedToArray from \"/home/nicolas/Documents/ESILV/MONNAIES_NUMERIQUES/erc721-interface-master/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/nicolas/Documents/ESILV/MONNAIES_NUMERIQUES/erc721-interface-master/client/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport TokenContract from \"./contracts/Token.json\";\nimport getWeb3 from \"./getWeb3\";\nimport { Layout } from \"./components/layout/Layout\";\nimport Home from \"./components/views/Home\";\nimport DisplayToken from \"./components/views/DisplayToken\";\nimport UserToken from \"./components/views/UserToken\";\nimport BuyToken from \"./components/views/BuyToken\";\nimport ErrorPage from \"./components/misc/ErrorPage\";\nexport default function App() {\n  const _useState = useState({\n    web3: null,\n    accounts: [],\n    contractInstance: null,\n    counter: 0,\n    users: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // get network provider and web3 instance\n        const web3 = await getWeb3(); // get accounts\n\n        const accounts = await web3.eth.getAccounts(); // get contract instance\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = TokenContract.networks[networkId];\n        const contractInstance = new web3.eth.Contract(TokenContract.abi, deployedNetwork && deployedNetwork.address); // get total token\n\n        const counter = await contractInstance.methods.getCounter().call(); // get all addresses that have bought one of our token\n\n        const allAddresses = await getAllAddresses(contractInstance, counter); // remove duplicates\n\n        const users = removeDuplicate(allAddresses); // set contract state\n\n        setState({\n          web3: web3,\n          accounts: accounts,\n          contractInstance: contractInstance,\n          counter: counter,\n          users: users\n        });\n      } catch (error) {\n        alert(\"Failed to load web3, accounts or contract\");\n      }\n    };\n\n    const removeDuplicate = arr => [...new Set(arr)];\n\n    const getAllAddresses = async (contractInstance, counter) => {\n      let allAddresses = [];\n\n      for (let id = 0; id < counter; id++) {\n        let address = await contractInstance.methods.ownerOf(id).call();\n        allAddresses.push(address);\n      }\n\n      return allAddresses;\n    };\n\n    init();\n  }, []);\n  const web3 = state.web3,\n        accounts = state.accounts,\n        contractInstance = state.contractInstance,\n        counter = state.counter,\n        users = state.users;\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: () => React.createElement(Home, {\n      web3: web3,\n      contractInstance: contractInstance,\n      counter: counter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/displayToken\",\n    render: () => React.createElement(DisplayToken, {\n      web3: web3,\n      contractInstance: contractInstance,\n      counter: counter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/userToken\",\n    render: () => React.createElement(UserToken, {\n      web3: web3,\n      contractInstance: contractInstance,\n      users: users,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/buyToken\",\n    render: () => React.createElement(BuyToken, {\n      web3: web3,\n      accounts: accounts,\n      contractInstance: contractInstance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(Route, {\n    component: ErrorPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }))));\n}","map":{"version":3,"sources":["/home/nicolas/Documents/ESILV/MONNAIES_NUMERIQUES/erc721-interface-master/client/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Switch","Route","TokenContract","getWeb3","Layout","Home","DisplayToken","UserToken","BuyToken","ErrorPage","App","web3","accounts","contractInstance","counter","users","state","setState","init","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","Contract","abi","address","methods","getCounter","call","allAddresses","getAllAddresses","removeDuplicate","error","alert","arr","Set","id","ownerOf","push"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,MAAT,QAAuB,4BAAvB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,OAAOC,YAAP,MAAyB,iCAAzB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,oBACFd,QAAQ,CAAC;AACjCe,IAAAA,IAAI,EAAE,IAD2B;AAEjCC,IAAAA,QAAQ,EAAE,EAFuB;AAGjCC,IAAAA,gBAAgB,EAAE,IAHe;AAIjCC,IAAAA,OAAO,EAAE,CAJwB;AAKjCC,IAAAA,KAAK,EAAE;AAL0B,GAAD,CADN;AAAA;AAAA,QACrBC,KADqB;AAAA,QACdC,QADc;;AAS5BpB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,IAAI,GAAG,YAAY;AACvB,UAAI;AACF;AACA,cAAMP,IAAI,GAAG,MAAMR,OAAO,EAA1B,CAFE,CAGF;;AACA,cAAMS,QAAQ,GAAG,MAAMD,IAAI,CAACQ,GAAL,CAASC,WAAT,EAAvB,CAJE,CAKF;;AACA,cAAMC,SAAS,GAAG,MAAMV,IAAI,CAACQ,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,cAAMC,eAAe,GAAGtB,aAAa,CAACuB,QAAd,CAAuBJ,SAAvB,CAAxB;AACA,cAAMR,gBAAgB,GAAG,IAAIF,IAAI,CAACQ,GAAL,CAASO,QAAb,CACvBxB,aAAa,CAACyB,GADS,EAEvBH,eAAe,IAAIA,eAAe,CAACI,OAFZ,CAAzB,CARE,CAYF;;AACA,cAAMd,OAAO,GAAG,MAAMD,gBAAgB,CAACgB,OAAjB,CAAyBC,UAAzB,GAAsCC,IAAtC,EAAtB,CAbE,CAcF;;AACA,cAAMC,YAAY,GAAG,MAAMC,eAAe,CAACpB,gBAAD,EAAmBC,OAAnB,CAA1C,CAfE,CAgBF;;AACA,cAAMC,KAAK,GAAGmB,eAAe,CAACF,YAAD,CAA7B,CAjBE,CAkBF;;AACAf,QAAAA,QAAQ,CAAC;AACPN,UAAAA,IAAI,EAAEA,IADC;AAEPC,UAAAA,QAAQ,EAAEA,QAFH;AAGPC,UAAAA,gBAAgB,EAAEA,gBAHX;AAIPC,UAAAA,OAAO,EAAEA,OAJF;AAKPC,UAAAA,KAAK,EAAEA;AALA,SAAD,CAAR;AAOD,OA1BD,CA0BE,OAAOoB,KAAP,EAAc;AACdC,QAAAA,KAAK,CAAC,2CAAD,CAAL;AACD;AACF,KA9BD;;AAgCA,UAAMF,eAAe,GAAGG,GAAG,IAAI,CAAC,GAAG,IAAIC,GAAJ,CAAQD,GAAR,CAAJ,CAA/B;;AAEA,UAAMJ,eAAe,GAAG,OAAOpB,gBAAP,EAAyBC,OAAzB,KAAqC;AAC3D,UAAIkB,YAAY,GAAG,EAAnB;;AACA,WAAK,IAAIO,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGzB,OAAtB,EAA+ByB,EAAE,EAAjC,EAAqC;AACnC,YAAIX,OAAO,GAAG,MAAMf,gBAAgB,CAACgB,OAAjB,CAAyBW,OAAzB,CAAiCD,EAAjC,EAAqCR,IAArC,EAApB;AACAC,QAAAA,YAAY,CAACS,IAAb,CAAkBb,OAAlB;AACD;;AACD,aAAOI,YAAP;AACD,KAPD;;AASAd,IAAAA,IAAI;AACL,GA7CQ,EA6CN,EA7CM,CAAT;AAT4B,QAwDpBP,IAxDoB,GAwDiCK,KAxDjC,CAwDpBL,IAxDoB;AAAA,QAwDdC,QAxDc,GAwDiCI,KAxDjC,CAwDdJ,QAxDc;AAAA,QAwDJC,gBAxDI,GAwDiCG,KAxDjC,CAwDJH,gBAxDI;AAAA,QAwDcC,OAxDd,GAwDiCE,KAxDjC,CAwDcF,OAxDd;AAAA,QAwDuBC,KAxDvB,GAwDiCC,KAxDjC,CAwDuBD,KAxDvB;AA0D5B,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,GAFP;AAGE,IAAA,MAAM,EAAE,MACN,oBAAC,IAAD;AACE,MAAA,IAAI,EAAEJ,IADR;AAEE,MAAA,gBAAgB,EAAEE,gBAFpB;AAGE,MAAA,OAAO,EAAEC,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAYE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,eAFP;AAGE,IAAA,MAAM,EAAE,MACN,oBAAC,YAAD;AACE,MAAA,IAAI,EAAEH,IADR;AAEE,MAAA,gBAAgB,EAAEE,gBAFpB;AAGE,MAAA,OAAO,EAAEC,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,EAuBE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,YAFP;AAGE,IAAA,MAAM,EAAE,MACN,oBAAC,SAAD;AACE,MAAA,IAAI,EAAEH,IADR;AAEE,MAAA,gBAAgB,EAAEE,gBAFpB;AAGE,MAAA,KAAK,EAAEE,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBF,EAkCE,oBAAC,KAAD;AACE,IAAA,KAAK,MADP;AAEE,IAAA,IAAI,EAAC,WAFP;AAGE,IAAA,MAAM,EAAE,MACN,oBAAC,QAAD;AACE,MAAA,IAAI,EAAEJ,IADR;AAEE,MAAA,QAAQ,EAAEC,QAFZ;AAGE,MAAA,gBAAgB,EAAEC,gBAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlCF,EA6CE,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEJ,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7CF,CADF,CADF,CADF;AAqDD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport TokenContract from \"./contracts/Token.json\";\nimport getWeb3 from \"./getWeb3\";\nimport { Layout } from \"./components/layout/Layout\";\nimport Home from \"./components/views/Home\";\nimport DisplayToken from \"./components/views/DisplayToken\";\nimport UserToken from \"./components/views/UserToken\";\nimport BuyToken from \"./components/views/BuyToken\";\nimport ErrorPage from \"./components/misc/ErrorPage\";\n\nexport default function App() {\n  const [state, setState] = useState({\n    web3: null,\n    accounts: [],\n    contractInstance: null,\n    counter: 0,\n    users: []\n  });\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        // get network provider and web3 instance\n        const web3 = await getWeb3();\n        // get accounts\n        const accounts = await web3.eth.getAccounts();\n        // get contract instance\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = TokenContract.networks[networkId];\n        const contractInstance = new web3.eth.Contract(\n          TokenContract.abi,\n          deployedNetwork && deployedNetwork.address\n        );\n        // get total token\n        const counter = await contractInstance.methods.getCounter().call();\n        // get all addresses that have bought one of our token\n        const allAddresses = await getAllAddresses(contractInstance, counter);\n        // remove duplicates\n        const users = removeDuplicate(allAddresses);\n        // set contract state\n        setState({\n          web3: web3,\n          accounts: accounts,\n          contractInstance: contractInstance,\n          counter: counter,\n          users: users\n        });\n      } catch (error) {\n        alert(\"Failed to load web3, accounts or contract\");\n      }\n    };\n\n    const removeDuplicate = arr => [...new Set(arr)];\n\n    const getAllAddresses = async (contractInstance, counter) => {\n      let allAddresses = [];\n      for (let id = 0; id < counter; id++) {\n        let address = await contractInstance.methods.ownerOf(id).call();\n        allAddresses.push(address);\n      }\n      return allAddresses;\n    };\n\n    init();\n  }, []);\n\n  const { web3, accounts, contractInstance, counter, users } = state;\n\n  return (\n    <Layout>\n      <Router>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <Home\n                web3={web3}\n                contractInstance={contractInstance}\n                counter={counter}\n              />\n            )}\n          />\n          <Route\n            exact\n            path=\"/displayToken\"\n            render={() => (\n              <DisplayToken\n                web3={web3}\n                contractInstance={contractInstance}\n                counter={counter}\n              />\n            )}\n          />\n          <Route\n            exact\n            path=\"/userToken\"\n            render={() => (\n              <UserToken\n                web3={web3}\n                contractInstance={contractInstance}\n                users={users}\n              />\n            )}\n          />\n          <Route\n            exact\n            path=\"/buyToken\"\n            render={() => (\n              <BuyToken\n                web3={web3}\n                accounts={accounts}\n                contractInstance={contractInstance}\n              />\n            )}\n          />\n          <Route component={ErrorPage} />\n        </Switch>\n      </Router>\n    </Layout>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}